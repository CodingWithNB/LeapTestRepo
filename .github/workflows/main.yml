name: Test Leapwork Action

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Run Leapwork Automated Test flows, schedule Daily regression
        shell: pwsh
        
        run: |
          # Define headers
          $headers = @{
            "AccessKey" = "ASvAPneQYwUL1VTX"
            "ngrok-skip-browser-warning" = "69420"
          }
          
          # Define API URL for starting schedule
          $runScheduleId = "d41f169d-88d5-442e-b8ba-9afe9dc01c3a"
          $url = "https://fba4-202-173-125-59.ngrok-free.app/api/v4/schedules/$runScheduleId/runNow"
          
          try {
              # Make PUT request to start schedule
              $response = Invoke-RestMethod -Uri $url -Method PUT -Headers $headers -ContentType "application/json" -ErrorAction Stop

              # Check if starting schedule was successful (status code 200-299)
              if ($response.StatusCode -ge 200 -and $response.StatusCode -lt 300) {
                  $jsonResponse = $response.Content | ConvertFrom-Json
                  $runId = $jsonResponse.runId
                  Write-Output "runId: $runId"

                  # Store runId in an environment variable for subsequent steps
                  echo "run_id=$runId" >> $env:GITHUB_ENV

                  # Initialize variables
                  $timeDelay = 60  # Delay in seconds
                  $isStillRunning = $true
                  $runItemsId = @()
                  $passedCount = 0
                  $failedCount = 0

                  do {
                      # Simulate waiting
                      Write-Output "Waiting for $timeDelay seconds..."
                      Start-Sleep -Seconds $timeDelay

                      # Make API call to retrieve executedRunItems
                      $executedRunItems = Invoke-RestMethod -Uri "https://fba4-202-173-125-59.ngrok-free.app/api/v4/runRunItems/$runId" -Method Get -Headers $headers -ContentType "application/json"

                      # Filter out already processed runItems
                      $executedRunItems = $executedRunItems | Where-Object { $_ -notin $runItemsId }

                      foreach ($runItemId in $executedRunItems) {
                          # Make API call to get runItem details
                          $runItem = Invoke-RestMethod -Uri "https://fba4-202-173-125-59.ngrok-free.app/api/v4/runItems/$runItemId" -Method Get -Headers $headers -ContentType "application/json"

                          $status = $runItem.Status

                          switch ($runItem.Status) {
                              
                              "Passed" {
                                  Write-Output "Status of runItem $($runItem.Status): Passed"
                                   $passedCount++
                              }
                              "Failed"{
                                Write-Output "Status of runItem $runItemId: $($runItem.Status)"
                                  $failedCount++
                              }
                              default {
                                  # Default case
                                  Write-Output "Unhandled status: $($runItem.Status)"
                              }
                          }

                          # Add runItemId to processed list
                          $runItemsId += $runItemId
                      }

                      # Check if the runStatus is Finished
                      $runStatus = Invoke-RestMethod -Uri "https://fba4-202-173-125-59.ngrok-free.app/api/v4/runStatus/$runId" -Method Get -Headers $headers -ContentType "application/json"

                      if ($runStatus -eq "Finished") {
                          # Check if all runItems have been processed
                          $allExecutedRunItems = Invoke-RestMethod -Uri "https://fba4-202-173-125-59.ngrok-free.app/api/v4/runRunItems/$runId" -Method Get -Headers $headers -ContentType "application/json"
                          if ($allExecutedRunItems.Count -gt 0 -and $allExecutedRunItems.Count -le $runItemsId.Count) {
                              $isStillRunning = $false
                          }
                      }

                      if ($isStillRunning) {
                          Write-Output "The schedule status is already '$runStatus' - wait a minute..."
                      }

                  } while ($isStillRunning)

                  # After loop completes, send email with results (example using SendGrid)
                  # Replace with your email sending logic
                  # Example of SendGrid integration in PowerShell:
                  # See previous example for Send-MailMessage usage

              } else {
                  Write-Error "Failed to start schedule. HTTP status code: $($response.StatusCode)"
                  exit 1
              }
              
          } catch {
              Write-Error "Error occurred: $_"
              exit 1
          }
