name: Test Leapwork Action

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run Leapwork Automated Test flows, schedule Daily regression
        env:
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}  # Define your secret in GitHub Secrets

        run: |
          # Define PowerShell script inline
          $headers = @{
            "AccessKey" = $env:ACCESS_KEY
            "ngrok-skip-browser-warning" = "69420"
          }
          
          $runId = "d44f4aa7-62eb-4072-bf5d-4f1a7de07298"
          $ngrokUrl = "https://fba4-202-173-125-59.ngrok-free.app/api/v4/run/$runId/runItemIds"

          Write-Output "Calling URL for runItemIds: $ngrokUrl"

          try {
              # Make GET request
              $response = Invoke-WebRequest -Uri $ngrokUrl -Method GET -Headers $headers -ContentType "application/json" -ErrorAction Stop
  
              # Print raw response (for debugging purposes)
              Write-Output "Raw Response:"
              Write-Output $response.Content
  
              # Check if request was successful (status code 200-299)
              if ($response.StatusCode -eq 200) {
                  $jsonResponse = $response.Content | ConvertFrom-Json
                  
                  # Print parsed JSON response (for debugging purposes)
                  Write-Output "Parsed JSON Response:"
                  Write-Output $jsonResponse
  
                  # Access RunItemIds
                  $runItemIds = $jsonResponse.RunItemIds
                  
                  # Check if RunItemIds array exists and is not empty
                  if ($runItemIds -and $runItemIds.Count -gt 0) {
                      $runItemId = $runItemIds[0]
                      Write-Output "runItemId: $runItemId"
                      
                      # Save runItemId to an environment variable for subsequent use
                      echo "run_item_id=$runItemId" >> $env:GITHUB_ENV
                  } else {
                      Write-Error "No RunItemIds found in API response."
                      exit 1
                  }
              } else {
                  Write-Error "Failed to retrieve runItemIds. HTTP status code: $($response.StatusCode)"
                  exit 1
              }
          } catch {
              Write-Error "Error occurred: $_"
              exit 1
          }
